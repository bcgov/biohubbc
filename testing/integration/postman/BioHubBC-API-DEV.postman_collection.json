{
	"info": {
		"_postman_id": "c4f67ff9-7252-4a76-a5b7-0bc5d3077e9d",
		"name": "BioHubBC-API-DEV",
		"description": "API for BioHubBC",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "draft",
			"item": [
				{
					"name": "delete",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "get",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "dwc",
			"item": [
				{
					"name": "validate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"occurrence_submission_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASEURL}}/dwc/validate",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"dwc",
								"validate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "permit",
			"item": [
				{
					"name": "create-no-sampling",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "get-no-sampling",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "project",
			"item": [
				{
					"name": "{projectId}",
					"item": [
						{
							"name": "attachments",
							"item": [
								{
									"name": "{attachmentId}",
									"item": [
										{
											"name": "delete",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": ""
												}
											},
											"response": []
										},
										{
											"name": "getSignedUrl",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": ""
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful GET request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
													"});",
													"",
													"pm.test(\"Response time is less than 2000ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);",
													"});",
													"",
													"pm.test(\"response body is an array\", function () {",
													"    pm.expect(pm.response.json()).to.be.an('array');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASEURL}}/projects/{{PROJECT_ID}}/artifacts/list",
											"host": [
												"{{BASEURL}}"
											],
											"path": [
												"projects",
												"{{PROJECT_ID}}",
												"artifacts",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "upload",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": ""
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "funding-sources",
							"item": [
								{
									"name": "{pfsid}",
									"item": [
										{
											"name": "delete",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": ""
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "add",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": ""
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "survey",
							"item": [
								{
									"name": "{surveyId}",
									"item": [
										{
											"name": "attachments",
											"item": [
												{
													"name": "{attachmentId}",
													"item": [
														{
															"name": "delete",
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": ""
																}
															},
															"response": []
														},
														{
															"name": "getSignedUrl",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": ""
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "list",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": ""
														}
													},
													"response": []
												},
												{
													"name": "upload",
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": ""
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "observations",
											"item": [
												{
													"name": "{observationId}",
													"item": [
														{
															"name": "update",
															"request": {
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": ""
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "create",
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": ""
														}
													},
													"response": []
												},
												{
													"name": "list",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": ""
														}
													},
													"response": []
												},
												{
													"name": "upload",
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": ""
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "submission",
											"item": [
												{
													"name": "{submissionId}",
													"item": [
														{
															"name": "getSignedUrl",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": ""
																}
															},
															"response": []
														},
														{
															"name": "view",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": ""
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "get",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": ""
														}
													},
													"response": []
												},
												{
													"name": "upload",
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "media",
																	"type": "file",
																	"src": "/C:/w/test files/dwc/dwca_moose.zip"
																}
															]
														},
														"url": {
															"raw": "{{BASEURL}}/project/{{PROJECT_ID}}/survey/{{SURVEY_ID}}/observation/submission/upload",
															"host": [
																"{{BASEURL}}"
															],
															"path": [
																"project",
																"{{PROJECT_ID}}",
																"survey",
																"{{SURVEY_ID}}",
																"observation",
																"submission",
																"upload"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "templates",
											"item": [
												{
													"name": "list",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": ""
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "delete",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": ""
												}
											},
											"response": []
										},
										{
											"name": "publish",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": ""
												}
											},
											"response": []
										},
										{
											"name": "update",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": ""
												}
											},
											"response": []
										},
										{
											"name": "view",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": ""
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "funding-sources",
									"item": [
										{
											"name": "list",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": ""
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "permits",
									"item": [
										{
											"name": "list",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": ""
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "create",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": ""
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "delete",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "publish",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "surveys",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "update",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						},
						{
							"name": "view",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "xlsx",
			"item": [
				{
					"name": "validate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"occurrence_submission_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASEURL}}/xlsx/validate",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"xlsx",
								"validate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "{userId}",
					"item": [
						{
							"name": "system-roles",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "self",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "access-request",
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "administrative-activities",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "administrative-activity",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "administrative-activity",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "codes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"description": "To access the authenticated api routes, a valid JWT token must be present in the 'Authorization' header.\nThe 'Authorization' header value must be of the form: `Bearer xxxxxx.yyyyyyy.zzzzzz`\n",
						"key": "Authorization",
						"value": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{BASEURL}}/codes",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"codes"
					]
				},
				"description": "Create a new project."
			},
			"response": []
		},
		{
			"name": "draft",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{BASEURL}}/draft",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"draft"
					]
				}
			},
			"response": []
		},
		{
			"name": "draft",
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{BASEURL}}/draft",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"draft"
					]
				}
			},
			"response": []
		},
		{
			"name": "drafts",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASEURL}}/draft",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"draft"
					]
				}
			},
			"response": []
		},
		{
			"name": "project",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set the `PROJECT_ID` environment variable to the `id` value returned by the last `POST project` request\r",
							"var response = JSON.parse(responseBody);\r",
							"pm.environment.set(\"PROJECT_ID\", response.id);\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate random 5 digit number\r",
							"pm.globals.set('randomNumber', Math.floor(Math.random() * 100000));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"description": "To access the authenticated api routes, a valid JWT token must be present in the 'Authorization' header.\nThe 'Authorization' header value must be of the form: `Bearer xxxxxx.yyyyyyy.zzzzzz`\n",
						"key": "Authorization",
						"value": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"coordinator\": {\r\n        \"first_name\": \"first name\",\r\n        \"last_name\": \"last name\",\r\n        \"email_address\": \"email@email.com\",\r\n        \"coordinator_agency\": \"coordinator agency\",\r\n        \"share_contact_details\": \"false\"\r\n    },\r\n    \"permit\": {\r\n        \"permits\": [\r\n            {\r\n                \"permit_number\": \"{{randomNumber}}\",\r\n                \"sampling_conducted\": \"true\"\r\n            }\r\n        ]\r\n    },\r\n    \"project\": {\r\n        \"project_name\": \"project name\",\r\n        \"project_type\": 3,\r\n        \"project_activities\": [\r\n            2,\r\n            4\r\n        ],\r\n        \"climate_change_initiatives\": [\r\n            2,\r\n            3\r\n        ],\r\n        \"start_date\": \"2021-03-08\",\r\n        \"end_date\": \"2021-03-26\"\r\n    },\r\n    \"location\": {\r\n        \"regions\": [\r\n            \"West Coast\",\r\n            \"Kootenays\"\r\n        ],\r\n        \"location_description\": \"A location description\",\r\n        \"geometry\": [\r\n            {\r\n                \"type\": \"Feature\",\r\n                \"id\": \"myGeo1\",\r\n                \"geometry\": {\r\n                    \"type\": \"Polygon\",\r\n                    \"coordinates\": [[\r\n                        [-128, 55],\r\n                        [-128, 55.5],\r\n                        [-128, 56],\r\n                        [-126, 58],\r\n                        [-128, 55]\r\n                    ]]\r\n                },\r\n                \"properties\": {\r\n                    \"name\": \"Biohub Islands 1\"\r\n                }\r\n            },\r\n            {\r\n                \"type\": \"Feature\",\r\n                \"id\": \"myGeo2\",\r\n                \"geometry\": {\r\n                    \"type\": \"Polygon\",\r\n                    \"coordinates\": [[\r\n                        [-128.5, 55.5],\r\n                        [-128.5, 56.0],\r\n                        [-128.5, 56.5],\r\n                        [-126.5, 58.5],\r\n                        [-128.5, 55.5]\r\n                    ]]\r\n                },\r\n                \"properties\": {\r\n                    \"name\": \"Biohub Islands 2\"\r\n                }\r\n            }\r\n        ]\r\n    },\r\n    \"species\": {\r\n        \"focal_species\": [\r\n            \"Acuteleaf Small Limestone Moss [Seligeria acutifolia]\",\r\n            \"American Badger [Taxidea taxus]\"\r\n        ],\r\n        \"ancillary_species\": [\r\n            \"Black Tern [Chlidonias niger]\",\r\n            \"Blue Shark [Prionace glauca]\"\r\n        ]\r\n    },\r\n    \"funding\": {\r\n        \"funding_sources\": [\r\n            {\r\n                \"agency_id\": 1,\r\n                \"investment_action_category\": 23,\r\n                \"agency_project_id\": \"11111\",\r\n                \"funding_amount\": 222,\r\n                \"start_date\": \"2021-03-09\",\r\n                \"end_date\": \"2021-03-26\"\r\n            }\r\n        ],\r\n        \"indigenous_partnerships\": [\r\n            1,\r\n            3\r\n        ],\r\n        \"stakeholder_partnerships\": [\r\n            \"Fish and Wildlife Compensation Program\",\r\n            \"Habitat Conservation Trust Fund\"\r\n        ]\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASEURL}}/project",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"project"
					]
				},
				"description": "Create a new project."
			},
			"response": []
		},
		{
			"name": "projects",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"description": "To access the authenticated api routes, a valid JWT token must be present in the 'Authorization' header.\nThe 'Authorization' header value must be of the form: `Bearer xxxxxx.yyyyyyy.zzzzzz`\n",
						"key": "Authorization",
						"value": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{BASEURL}}/projects",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"projects"
					]
				},
				"description": "Get all projects."
			},
			"response": []
		},
		{
			"name": "search",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "user",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "users",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "version",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASEURL}}/version",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"version"
					]
				},
				"description": "Get api version information.\r\n\r\nCan be used as a health check to see if the API is running."
			},
			"response": []
		},
		{
			"name": "token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "{{KEYCLOAK_CLIENT_ID}}",
							"type": "text"
						},
						{
							"key": "username",
							"value": "{{TEST_USERNAME}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{TEST_PASSWORD}}",
							"type": "text"
						},
						{
							"key": "scope",
							"value": "openid",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{KEYCLOAK_URL}}",
					"host": [
						"{{KEYCLOAK_URL}}"
					]
				},
				"description": "Fetch a bearer token for use in other API calls."
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{KEYCLOAK_TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const echoPostRequest = {",
					"    url: pm.environment.get('KEYCLOAK_URL'),",
					"    method: 'POST',",
					"    header: 'Content-Type:application/x-www-form-urlencoded',",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            { key: 'username', value: pm.environment.get('TEST_USERNAME') },",
					"            { key: 'password', value: pm.environment.get('TEST_PASSWORD') },",
					"            { key: 'scope', value: 'openid' },",
					"            { key: 'client_id', value: pm.environment.get('KEYCLOAK_CLIENT_ID') },",
					"            { key: 'grant_type', value: 'password' }",
					"        ]",
					"    }",
					"};",
					"",
					"var getToken = true;",
					"",
					"if (!pm.environment.get('KEYCLOAK_TOKEN_EXPIRY') ||",
					"    !pm.environment.get('KEYCLOAK_TOKEN')) {",
					"    console.log('Token or expiry date are missing')",
					"} else if (pm.environment.get('KEYCLOAK_TOKEN_EXPIRY') <= (new Date()).getTime()) {",
					"    console.log('Token is expired')",
					"} else {",
					"    getToken = false;",
					"    console.log('Token and expiry date are all good');",
					"}",
					"",
					"if (getToken === true) {",
					"    pm.sendRequest(echoPostRequest, function (err, res) {",
					"        if (err) {",
					"            console.log('Failed to fetch token');",
					"            console.log('error: ', err);",
					"        } else {",
					"            var responseJson = res.json();",
					"",
					"            if (responseJson.error) {",
					"                console.log('keycloak responded with an error');",
					"                console.log('response: ', res.json())",
					"            } else {",
					"                console.log('keycloak returned successfully');",
					"                console.log('response: ', res.json())",
					"",
					"                console.log('Saving token and expiry date');",
					"",
					"                pm.environment.set('KEYCLOAK_TOKEN', responseJson.access_token)",
					"",
					"                var expiryDate = new Date();",
					"                expiryDate.setSeconds(expiryDate.getSeconds() + responseJson.expires_in);",
					"                pm.environment.set('KEYCLOAK_TOKEN_EXPIRY', expiryDate.getTime());",
					"            }",
					"        }",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}