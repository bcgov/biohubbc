version: "3.5"

services:
  ## Build postgres docker image
  db:
    image: ${DOCKER_PROJECT_NAME}-db-${DOCKER_NAMESPACE}-img
    container_name: ${DOCKER_PROJECT_NAME}-db-${DOCKER_NAMESPACE}-container
    build:
      context: ./database/.docker/db
      dockerfile: Dockerfile
      args:
        - POSTGRES_VERSION=${POSTGRES_VERSION}
        - POSTGIS_VERSION=${POSTGIS_VERSION}
        - TZ=${DB_TZ}
    ports:
      - ${DB_PORT}:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $DB_ADMIN -p 5432 -d $DB_DATABASE"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - NODE_ENV=${NODE_ENV}
      - POSTGRES_USER=${DB_ADMIN}
      - POSTGRES_PASSWORD=${DB_ADMIN_PASS}
      - POSTGRES_DB=${DB_DATABASE}
      - PORT=${DB_PORT}
    networks:
      - local-network
    volumes:
      - postgres:/var/lib/postgresql/data

  ## Build the api docker image
  api:
    image: ${DOCKER_PROJECT_NAME}-api-${DOCKER_NAMESPACE}-img
    container_name: ${DOCKER_PROJECT_NAME}-api-${DOCKER_NAMESPACE}-container
    build:
      context: ./api
      dockerfile: ./.docker/api/Dockerfile
    ports:
      - ${API_PORT}:${API_PORT}
    environment:
      - NODE_ENV=${NODE_ENV}
      - TZ=${API_TZ}
      - API_HOST=${API_HOST}
      - API_PORT=${API_PORT}
      - DB_HOST=${DB_HOST}
      - DB_USER_API=${DB_USER_API}
      - DB_USER_API_PASS=${DB_USER_API_PASS}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_SCHEMA=${DB_SCHEMA}
      - KEYCLOAK_URL=${KEYCLOAK_URL}
      - OBJECT_STORE_URL=${OBJECT_STORE_URL}
      - OBJECT_STORE_ACCESS_KEY_ID=${OBJECT_STORE_ACCESS_KEY_ID}
      - OBJECT_STORE_SECRET_KEY_ID=${OBJECT_STORE_SECRET_KEY_ID}
      - OBJECT_STORE_BUCKET_NAME=${OBJECT_STORE_BUCKET_NAME}
      - MAX_REQ_BODY_SIZE=${MAX_REQ_BODY_SIZE}
      - MAX_UPLOAD_NUM_FILES=${MAX_UPLOAD_NUM_FILES}
      - MAX_UPLOAD_FILE_SIZE=${MAX_UPLOAD_FILE_SIZE}
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      - ./api:/opt/app-root/src
      - /opt/app-root/src/node_modules # prevents local node_modules overriding container node_modules
    networks:
      - local-network
    depends_on:
      - db
      - db_setup

  # Build the nginx web-server docker image
  nginx:
    image: ${DOCKER_PROJECT_NAME}-nginx-${DOCKER_NAMESPACE}-img
    container_name: ${DOCKER_PROJECT_NAME}-nginx-${DOCKER_NAMESPACE}-container
    build:
      context: ./.docker/nginx
      dockerfile: Dockerfile
    restart: always
    ports:
      - 80:80
    networks:
      - local-network
    depends_on:
      - api

  ## Build the app docker image
  app:
    image: ${DOCKER_PROJECT_NAME}-app-${DOCKER_NAMESPACE}-img
    container_name: ${DOCKER_PROJECT_NAME}-app-${DOCKER_NAMESPACE}-container
    build:
      context: ./app
      dockerfile: ./.docker/app/Dockerfile
    stdin_open: true
    ports:
      - ${APP_PORT}:${APP_PORT}
    environment:
      - NODE_ENV=${NODE_ENV}
      - REACT_APP_NODE_ENV=${NODE_ENV}
      - PORT=${APP_PORT}
      - REACT_APP_API_HOST=http://${API_HOST}
      - REACT_APP_API_PORT=${API_PORT}
      - REACT_APP_MAX_UPLOAD_NUM_FILES=${MAX_UPLOAD_NUM_FILES}
      - REACT_APP_MAX_UPLOAD_FILE_SIZE=${MAX_UPLOAD_FILE_SIZE}
      - REACT_APP_SITEMINDER_LOGOUT_URL=${SITEMINDER_LOGOUT_URL}
    volumes:
      - ./app:/opt/app-root/src
      - /opt/app-root/src/node_modules # prevents local node_modules overriding container node_modules
    networks:
      - local-network
    depends_on:
      - api

  ## Run the database migrations and seeding
  db_setup:
    image: ${DOCKER_PROJECT_NAME}-db-setup-${DOCKER_NAMESPACE}-img
    container_name: ${DOCKER_PROJECT_NAME}-db-setup-${DOCKER_NAMESPACE}-container
    build:
      context: ./database
      dockerfile: ./.docker/db/Dockerfile.setup
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=${DB_HOST}
      - DB_ADMIN=${DB_ADMIN}
      - DB_ADMIN_PASS=${DB_ADMIN_PASS}
      - DB_PORT=5432
      - DB_DATABASE=${DB_DATABASE}
      - DB_SCHEMA=${DB_SCHEMA}
      - DB_USER_API=${DB_USER_API}
      - DB_USER_API_PASS=${DB_USER_API_PASS}
      - DB_SCHEMA_DAPI_V1=${DB_SCHEMA_DAPI_V1}
    volumes:
      - /opt/app-root/src/node_modules # prevents local node_modules overriding container node_modules
    networks:
      - local-network
    depends_on:
      db:
        condition: service_healthy
    command: ["npm", "run", "setup"]

  ## Run the  database migrations
  db_migrate:
    image: ${DOCKER_PROJECT_NAME}-db-migrate-${DOCKER_NAMESPACE}-img
    container_name: ${DOCKER_PROJECT_NAME}-db-migrate-${DOCKER_NAMESPACE}-container
    build:
      context: ./database
      dockerfile: ./.docker/db/Dockerfile.migrate
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=${DB_HOST}
      - DB_ADMIN=${DB_ADMIN}
      - DB_ADMIN_PASS=${DB_ADMIN_PASS}
      - DB_PORT=5432
      - DB_DATABASE=${DB_DATABASE}
      - DB_SCHEMA=${DB_SCHEMA}
      - DB_USER_API=${DB_USER_API}
      - DB_USER_API_PASS=${DB_USER_API_PASS}
      - DB_SCHEMA_DAPI_V1=${DB_SCHEMA_DAPI_V1}
    volumes:
      - /opt/app-root/src/node_modules # prevents local node_modules overriding container node_modules
    networks:
      - local-network
    depends_on:
      db:
        condition: service_healthy
    command: ["npm", "run", "migrate:latest"]

  ## Rollback the latest database migrations
  db_rollback:
    image: ${DOCKER_PROJECT_NAME}-db-rollback-${DOCKER_NAMESPACE}-img
    container_name: ${DOCKER_PROJECT_NAME}-db-rollback-${DOCKER_NAMESPACE}-container
    build:
      context: ./database
      dockerfile: ./.docker/db/Dockerfile.rollback
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=${DB_HOST}
      - DB_ADMIN=${DB_ADMIN}
      - DB_ADMIN_PASS=${DB_ADMIN_PASS}
      - DB_PORT=5432
      - DB_DATABASE=${DB_DATABASE}
      - DB_SCHEMA=${DB_SCHEMA}
      - DB_USER_API=${DB_USER_API}
      - DB_USER_API_PASS=${DB_USER_API_PASS}
      - DB_SCHEMA_DAPI_V1=${DB_SCHEMA_DAPI_V1}
    volumes:
      - /opt/app-root/src/node_modules # prevents local node_modules overriding container node_modules
    networks:
      - local-network
    depends_on:
      db:
        condition: service_healthy
    command: ["npm", "run", "migrate:rollback"]

networks:
  local-network:
    driver: bridge

volumes:
  postgres:
    name: ${DOCKER_PROJECT_NAME}-db-${DOCKER_NAMESPACE}-vol
