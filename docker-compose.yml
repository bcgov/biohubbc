version: '3.5'

services:
  ## Build postgres docker image
  db:
    image: ${DOCKER_PROJECT_NAME}-db-${DOCKER_NAMESPACE}-img
    container_name: ${DOCKER_PROJECT_NAME}-db-${DOCKER_NAMESPACE}-container
    build:
      context: ./database/.docker/db
      dockerfile: Dockerfile
    ports:
      - ${DB_PORT}:${DB_PORT}
    environment:
      - NODE_ENV=${NODE_ENV}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_DATABASE}
      - PORT=${DB_PORT}
    networks:
      - local-network
    volumes:
      - postgres:/var/lib/postgresql/data

  ## Run the database migrations and seeding
  db_setup:
    image: ${DOCKER_PROJECT_NAME}-db-${DOCKER_NAMESPACE}-setup-img
    container_name: ${DOCKER_PROJECT_NAME}-db-${DOCKER_NAMESPACE}-setup-container
    build:
      context: ./database
      dockerfile: ./.docker/db/Dockerfile.setup
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_SCHEMA=${DB_SCHEMA}
    networks:
      - local-network
    depends_on:
      - db
    command: ['./.docker/wait-for-it.sh', 'db:${DB_PORT}', '--', 'npm', 'run', 'setup']

  ## Build the api docker image
  api:
    image: ${DOCKER_PROJECT_NAME}-api-${DOCKER_NAMESPACE}-img
    container_name: ${DOCKER_PROJECT_NAME}-api-${DOCKER_NAMESPACE}-container
    build:
      context: ./api
      dockerfile: ./.docker/api/Dockerfile
    ports:
      - ${API_PORT}:${API_PORT}
    environment:
      - NODE_ENV=${NODE_ENV}
      - API_HOST=${API_HOST}
      - API_PORT=${API_PORT}
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_SCHEMA=${DB_SCHEMA}
      - KEYCLOAK_URL=${KEYCLOAK_URL}
      - OBJECT_STORE_URL=${OBJECT_STORE_URL}
      - OBJECT_STORE_ACCESS_KEY_ID=${OBJECT_STORE_ACCESS_KEY_ID}
      - OBJECT_STORE_SECRET_KEY_ID=${OBJECT_STORE_SECRET_KEY_ID}
      - OBJECT_STORE_BUCKET_NAME=${OBJECT_STORE_BUCKET_NAME}
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      - ./api:/opt/app-root/src
    networks:
      - local-network
    depends_on:
      - db
      - db_setup

  ## Build the app docker image
  app:
    image: ${DOCKER_PROJECT_NAME}-app-${DOCKER_NAMESPACE}-img
    container_name: ${DOCKER_PROJECT_NAME}-app-${DOCKER_NAMESPACE}-container
    build:
      context: ./app
      dockerfile: ./.docker/app/Dockerfile
    ports:
      - ${APP_PORT}:${APP_PORT}
    environment:
      - NODE_ENV=${NODE_ENV}
      - APP_PORT=${APP_PORT}
      - LOCAL_API_HOST=app_api:${API_PORT}
    volumes:
      - ./app:/opt/app-root/src
    networks:
      - local-network
    depends_on:
      - nginx

  # Build the nginx web-server docker image
  nginx:
    image: ${DOCKER_PROJECT_NAME}-nginx-${DOCKER_NAMESPACE}-img
    container_name: ${DOCKER_PROJECT_NAME}-nginx-${DOCKER_NAMESPACE}-container
    build:
      context: ./.docker/nginx
      dockerfile: Dockerfile
    restart: always
    ports:
      - 80:80
    networks:
      - local-network
    depends_on:
      - db
      - api

networks:
  local-network:
    driver: bridge

volumes:
  postgres:
    name: ${DOCKER_PROJECT_NAME}-db-${DOCKER_NAMESPACE}-vol
