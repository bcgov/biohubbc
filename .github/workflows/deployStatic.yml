# Static Deploy On OpenShift
# Builds and Deploys merged PR's to persistent pods/services/routes/etc in the OpenShift Dev or Test or Prod environment.
name: Static Deploy on OpenShift

on:
  pull_request:
    types: [opened, reopened, synchronize, closed]
    branches:
      - dev
      - test
      - prod

jobs:
  # Print variables for logging and debugging purposes
  checkEnv:
    name: Check Env variables
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true }}
    steps:
      - name: Print Env Vars
        run: |
          echo OC CLI Version: $(oc version)
          echo Git Base Ref: ${{ github.base_ref }}
          echo Git Change ID: ${{ github.event.number }}
          echo Git Pull Request Ref: ${{ github.event.pull_request.head.sha }}
          echo Git Event Name: ${{ github.event_name }}
          echo Git Event Action: ${{ github.event.action }}
          echo Git Labels: "$LABELS"
          echo PR in Draft: ${{ github.event.pull_request.draft }}

  scaleDownPods:
    name: Scale down the pods for this PR
    runs-on: ubuntu-latest
    env:
      BUILD_ID: ${{ github.event.number }}
    needs:
      - checkEnv
    steps:
      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      - name: Scale down
        run: |
          oc project af2668-dev
          oc get deploymentconfig --selector env-id=$BUILD_ID -o name | awk '{print "oc scale --replicas=0  " $1}' | bash

  # Build the Database image
  buildDatabase:
    name: Build Database Image
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.draft == false }}
    env:
      BUILD_ID: ${{ github.event.number }}
      BRANCH: ${{ github.base_ref }}
    needs:
      - scaleDownPods
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Build the database image
      - name: Build Database Image
        working-directory: "./database/.pipeline/"
        run: |
          npm install
          DEBUG=* npm run db:build -- --pr=$BUILD_ID --branch=$BRANCH --type=static

  # Build the Database Setup image
  buildDatabaseSetup:
    name: Build Database Setup Image
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.draft == false }}
    env:
      BUILD_ID: ${{ github.event.number }}
      BRANCH: ${{ github.base_ref }}
    needs:
      - scaleDownPods
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Build the database image
      - name: Build Database Setup Image
        working-directory: "./database/.pipeline/"
        run: |
          npm install
          # npm ci
          DEBUG=* npm run db-setup:build -- --pr=$BUILD_ID --branch=$BRANCH --type=static

  # Build the API image
  buildAPI:
    name: Build API Image
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.draft == false }}
    env:
      BUILD_ID: ${{ github.event.number }}
      BRANCH: ${{ github.base_ref }}
    needs:
      - scaleDownPods
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Log in to OpenShift.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Build the api image
      - name: Build API Image
        working-directory: "./api/.pipeline/"
        run: |
          npm install
          # npm ci
          DEBUG=* npm run build -- --pr=$BUILD_ID --branch=$BRANCH --type=static

  # Build the web frontend app
  buildAPP:
    name: Build App Image
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.draft == false }}
    env:
      BUILD_ID: ${{ github.event.number }}
      BRANCH: ${{ github.base_ref }}
    needs:
      - scaleDownPods
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Build the app image
      - name: Build APP Image
        working-directory: "./app/.pipeline/"
        run: |
          npm install
          # npm ci
          DEBUG=* npm run build -- --pr=$BUILD_ID --branch=$BRANCH --type=static

  # Deploy Database image
  deployDatabase:
    name: Deploy Database Image
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.draft == false }}
    env:
      BUILD_ID: ${{ github.event.number }}
      BRANCH: ${{ github.base_ref }}
    needs:
      - buildDatabase
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Deploy the database image
      - name: Deploy Database Image
        working-directory: "./database/.pipeline/"
        run: |
          npm install
          # npm ci
          DEBUG=* npm run db:deploy -- --pr=$BUILD_ID --env=$BRANCH --branch=$BRANCH --type=static

  # Deploy Database image
  deployDatabaseSetup:
    name: Deploy Database Setup Image
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.draft == false }}
    env:
      BUILD_ID: ${{ github.event.number }}
      BRANCH: ${{ github.base_ref }}
    needs:
      - buildDatabaseSetup
      - deployDatabase
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Deploy the database setup image
      - name: Deploy Database Setup Image
        working-directory: "./database/.pipeline/"
        run: |
          npm install
          # npm ci
          DEBUG=* npm run db-setup:deploy -- --pr=$BUILD_ID --env=$BRANCH --branch=$BRANCH --type=static

  # Deploy API image
  deployAPI:
    name: Deploy API Image
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.draft == false }}
    env:
      BUILD_ID: ${{ github.event.number }}
      BRANCH: ${{ github.base_ref }}
    needs:
      - buildAPI
      - deployDatabase
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Deploy the api image
      - name: Deploy API Image
        working-directory: "./api/.pipeline/"
        run: |
          npm install
          # npm ci
          DEBUG=* npm run deploy -- --pr=$BUILD_ID --env=$BRANCH --branch=$BRANCH --type=static

  # Deploy App image
  deployAPP:
    name: Deploy App Image
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.draft == false }}
    env:
      BUILD_ID: ${{ github.event.number }}
      BRANCH: ${{ github.base_ref }}
    needs:
      - buildAPP
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Deploy the app image
      - name: Deploy App Image
        working-directory: "./app/.pipeline"
        run: |
          npm install
          # npm ci
          DEBUG=* npm run deploy -- --pr=$BUILD_ID --env=$BRANCH --branch=$BRANCH --type=static

  # Clean build/deployment artifacts
  clean:
    name: Clean Build/Deployment Artifacts
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.draft == false }}
    needs:
      - deployAPP
      - deployAPI
      - deployDatabaseSetup
    env:
      BUILD_ID: ${{ github.event.number }}
      BRANCH: ${{ github.base_ref }}
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Clean the database build/deployment artifacts
      - name: Clean Database Artifacts
        working-directory: "./database/.pipeline/"
        run: |
          npm install
          # npm ci
          DEBUG=* npm run clean -- --pr=$BUILD_ID --env=build
          DEBUG=* npm run clean -- --pr=$BUILD_ID --env=dev

      # Clean the api build/deployment artifacts
      - name: Clean API Artifacts
        working-directory: "./api/.pipeline/"
        run: |
          npm install
          # npm ci
          DEBUG=* npm run clean -- --pr=$BUILD_ID --env=build
          DEBUG=* npm run clean -- --pr=$BUILD_ID --env=dev

      # Clean the app build/deployment artifacts
      - name: Clean APP Artifacts
        working-directory: "./app/.pipeline/"
        run: |
          npm install
          # npm ci
          DEBUG=* npm run clean -- --pr=$BUILD_ID --env=build
          DEBUG=* npm run clean -- --pr=$BUILD_ID --env=dev

      # Clean the reamaining build/deployment artifacts
      - name: Clean remaining Artifacts
        run: |
          oc project af2668-dev
          oc get all,pvc,secret,pods,ReplicationController,DeploymentConfig,HorizontalPodAutoscaler,imagestreamtag -o name | grep biohubbc | grep $BUILD_ID | awk '{print "oc delete " $1}' | bash
          oc project af2668-tools
          oc get all,pvc,secret,pods,ReplicationController,DeploymentConfig,HorizontalPodAutoscaler,imagestreamtag -o name | grep biohubbc | grep $BUILD_ID | awk '{print "oc delete " $1}' | bash

  cypress-run:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.draft == false && github.base_ref != 'prod' }}
    env:
      CYPRESS_RECORD_KEY: ${{ secrets.RECORDING_KEY }}
      CYPRESS_username: ${{ secrets.CYPRESS_USER_NAME }}
      CYPRESS_password: ${{ secrets.CYPRESS_PASSWORD }}
      CYPRESS_BASE_URL: 'https://${{ github.base_ref }}-biohubbc.apps.silver.devops.gov.bc.ca'
      CYPRESS_host: 'https://${{ github.base_ref }}-biohubbc.apps.silver.devops.gov.bc.ca'
      CYPRESS_ENVIRONMENT: ${{ github.base_ref }}
      CYPRESS_authRealm: '35r1iman'
      CYPRESS_authClientId: 'biohubbc'
      CYPRESS_authUrl: 'https://${{ github.base_ref }}.oidc.gov.bc.ca'
    needs:
      - deployDatabase
      - deployDatabaseSetup
      - deployAPI
      - deployAPP
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      - name: Wait for API response
        uses: nev7n/wait_for_response@v1.0.1
        with:
          url: 'https://api-${{ github.base_ref }}-biohubbc.apps.silver.devops.gov.bc.ca/version'
          responseCode: 200
          timeout: 240000
          interval: 500

      - name: Wait for APP response
        uses: nev7n/wait_for_response@v1.0.1
        with:
          url: 'https://${{ github.base_ref }}-biohubbc.apps.silver.devops.gov.bc.ca'
          responseCode: 200
          timeout: 240000
          interval: 500

      - name: E2E Smoke tests
        uses: cypress-io/github-action@v2
        # let's give this action an ID so we can refer
        # to its output values later
        id: smoke
        continue-on-error: false
        with:
          wait-on: 'https://${{ github.base_ref }}-biohubbc.apps.silver.devops.gov.bc.ca'
          wait-on-timeout: 240
          record: true
          working-directory: testing/e2e

      - name: Print Env Vars
        run: |
          echo Git Base Ref: ${{ github.base_ref }}
          echo Git Change ID: ${{ github.event.number }}
          echo Cypress BaseUrl: $CYPRESS_BASE_URL
          echo Cypress Host: $CYPRESS_ENVIRONMENT
          echo $CYPRESS_authRealm
          echo $CYPRESS_authClientId
          echo $CYPRESS_authUrl

  notify:
    name: Discord Notification
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.draft == false }} && always()
    needs: # make sure the notification is sent AFTER the jobs you want included have completed
      - deployAPP
      - deployAPI
      - deployDatabaseSetup
    steps:
      - name: Notify
        uses: nobrayner/discord-webhook@v1
        with:
          github-token: ${{ secrets.github_token }}
          discord-webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "${{ github.workflow }}: {{STATUS}}"
          username: ${{ github.actor }}
          description: "PR: ${{ github.event.number }} - ${{ github.event.pull_request.title }}: was deployed in ${{ github.base_ref }}!"
