# PR Based Deploy On OpenShift
# Builds and Deploys unmerged PR's to temporary pods/services/routes/etc in the OpenShift Dev environment.
name: PR-Based Deploy on OpenShift

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
    branches-ignore:
      - prod

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  # Print variables for logging and debugging purposes
  checkEnv:
    name: Print Env variables
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ github.event.pull_request.merged == false }}
    steps:
      - name: Print Env Vars
        run: |
          echo OC CLI Version: $(oc version)
          echo Git Base Ref: ${{ github.base_ref }}
          echo Git Change ID: ${{ github.event.number }}
          echo Git Pull Request Ref: ${{ github.event.pull_request.head.sha }}
          echo Git Event Name: ${{ github.event_name }}
          echo Git Event Action: ${{ github.event.action }}
          echo Git Branch Ref: ${{ github.head_ref }}
          echo PR in Draft: ${{ github.event.pull_request.draft }}

  # Checkout the repo once and cache it for use in subsequent jobs
  checkoutRepo:
    name: Checkout and cache target branch
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ github.event.pull_request.merged == false }}
    env:
      PR_NUMBER: ${{ github.event.number }}
    steps:
      - name: Checkout Target Branch
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      # Cache the repo
      - name: Cache repo
        uses: actions/cache@v4
        id: cache-repo
        env:
          cache-name: cache-repo
        with:
          # Cache repo based on the commit sha that triggered the workflow
          path: ${{ github.workspace }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}

      # Install Node - for `node` and `npm` commands
      # Note: This already uses actions/cache internally, so repeat calls in subsequent jobs are not a performance hit
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

  # Build the Database image
  buildDatabase:
    name: Build Database Image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      PR_NUMBER: ${{ github.event.number }}
      APP_NAME: "biohubbc-db"
    needs:
      - checkoutRepo
    steps:
      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # Load repo from cache
      - name: Cache repo
        uses: actions/cache@v4
        id: cache-repo
        env:
          cache-name: cache-repo
        with:
          path: ${{ github.workspace }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}

      # Checkout the branch if not restored via cache
      - name: Checkout Target Branch
        if: steps.cache-repo.outputs.cache-hit != 'true'
        uses: actions/checkout@v4

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Scale down any existing OpenShift pods for this PR deployment
      # Why? The new pods will be deployed before the existing pods are terminated, and twice the resources will be needed
      # in that moment. If not enough resources are available to spin up the new pods, then they may fail to deploy.
      - name: Scale down database pods
        run: oc get deploymentconfig --namespace af2668-dev --selector env-id=$PR_NUMBER,app-name=$APP_NAME -o name | awk '{print "oc scale --replicas=0 " $1}' | bash

      # Install database pipeline node modules
      # Note: This already caches node modules internally
      - name: Install pipeline node modules
        working-directory: database/.pipeline/
        run: npm ci

      # Build the database image
      - name: Build Database Image
        working-directory: database/.pipeline/
        run: |
          DEBUG=* npm run db:build -- --pr=$PR_NUMBER

  # Build the Database Setup image
  buildDatabaseSetup:
    name: Build Database Setup Image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      PR_NUMBER: ${{ github.event.number }}
    needs:
      - checkoutRepo
    steps:
      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # Load repo from cache
      - name: Cache repo
        uses: actions/cache@v4
        id: cache-repo
        env:
          cache-name: cache-repo
        with:
          path: ${{ github.workspace }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}

      # Checkout the branch if not restored via cache
      - name: Checkout Target Branch
        if: steps.cache-repo.outputs.cache-hit != 'true'
        uses: actions/checkout@v4

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Install database pipeline node modules
      # Note: This already caches node modules internally
      - name: Install pipeline node modules
        working-directory: database/.pipeline/
        run: npm ci

      # Build the database image
      - name: Build Database Setup Image
        working-directory: database/.pipeline/
        run: |
          DEBUG=* npm run db-setup:build -- --pr=$PR_NUMBER

  # Deploy Database image
  deployDatabase:
    name: Deploy Database Image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      PR_NUMBER: ${{ github.event.number }}
    needs:
      - buildDatabase
    steps:
      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # Load repo from cache
      - name: Cache repo
        uses: actions/cache@v4
        id: cache-repo
        env:
          cache-name: cache-repo
        with:
          path: ${{ github.workspace }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}

      # Checkout the branch if not restored via cache
      - name: Checkout Target Branch
        if: steps.cache-repo.outputs.cache-hit != 'true'
        uses: actions/checkout@v4

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Install database pipeline node modules
      # Note: This already caches node modules internally
      - name: Install pipeline node modules
        working-directory: database/.pipeline/
        run: npm ci

      # Deploy the database image
      - name: Deploy Database Image
        working-directory: database/.pipeline/
        run: |
          DEBUG=* npm run db:deploy -- --pr=$PR_NUMBER --env=dev

  # Deploy Database image
  deployDatabaseSetup:
    name: Deploy Database Setup Image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      PR_NUMBER: ${{ github.event.number }}
    needs:
      - buildDatabaseSetup
      - deployDatabase
    steps:
      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # Load repo from cache
      - name: Cache repo
        uses: actions/cache@v4
        id: cache-repo
        env:
          cache-name: cache-repo
        with:
          path: ${{ github.workspace }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}

      # Checkout the branch if not restored via cache
      - name: Checkout Target Branch
        if: steps.cache-repo.outputs.cache-hit != 'true'
        uses: actions/checkout@v4

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Install database pipeline node modules
      # Note: This already caches node modules internally
      - name: Install pipeline node modules
        working-directory: database/.pipeline/
        run: npm ci

      # Deploy the database setup image
      - name: Deploy Database Setup Image
        working-directory: database/.pipeline/
        run: |
          DEBUG=* npm run db-setup:deploy -- --pr=$PR_NUMBER --env=dev

  # Report the overall status of all jobs.
  # Why? Skipped jobs are not considered successes when specifying requird jobs in the GitHub PR settings. Rather than
  # specify each job, we can specify this final job only, and use its status as an indicator of all previous jobs
  # having successfully run. We can then manually include the 'skipped' status as part our definition of success.
  workflowStatus:
    name: Workflow Status
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ always() &&
      github.event.pull_request.merged == false &&
      github.event.pull_request.draft == false }}
    needs:
      - checkEnv
      - checkoutRepo
      - buildDatabase
      - buildDatabaseSetup
      - deployDatabase
      - deployDatabaseSetup
    steps:
      - name: Log result
        run: |
          echo needs.checkEnv.result: ${{ needs.checkEnv.result }}
          echo needs.checkoutRepo.result: ${{ needs.checkoutRepo.result }}
          echo needs.buildDatabase.result: ${{ needs.buildDatabase.result }}
          echo needs.buildDatabaseSetup.result: ${{ needs.buildDatabaseSetup.result }}
          echo needs.deployDatabase.result: ${{ needs.deployDatabase.result }}
          echo needs.deployDatabaseSetup.result: ${{ needs.deployDatabaseSetup.result }}

      - name: Report success
        if: |
          !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
        run: |
          echo All deployments completed successfully or were skipped
          exit 0

      - name: Report failure
        if: |
          contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: |
          echo One or more deployments failed or was cancelled
          exit 1
