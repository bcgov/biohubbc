# PR Based Deploy On OpensShift
# Builds and Deploys unmerged PR's to temporary pods/services/routes/etc in the OpenShift Dev environment.
name: PR-Based Deploy on OpensShift

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  # Print variables for logging and debugging purposes
  checkEnv:
    name: Check Env variables
    runs-on: ubuntu-16.04
    if: ${{ github.event.pull_request.merged == false }}
    steps:
      - name: Print Env Vars
        run: |
          echo OC CLI Version: $(oc version)
          echo Git Base Ref: ${{ github.base_ref }}
          echo Git Change ID: ${{ github.event.number }}
          echo Git Pull Request Ref: ${{ github.event.pull_request.head.sha }}
          echo Git Event Name: ${{ github.event_name }}
          echo Git Event Action: ${{ github.event.action }}
          echo Git Labels: "$LABELS"
          echo PR in Draft: ${{ github.event.pull_request.draft }}

  scaleDownPods:
    name: Scale down the pods for this PR
    runs-on: ubuntu-16.04
    env:
      BUILD_ID: ${{ github.event.number }}
    needs:
      - checkEnv
    steps:
      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      - name: Scale down
        run: |
          oc project af2668-dev
          oc get deploymentconfig --selector env-id=$BUILD_ID -o name > list.txt
          awk '{​​​​​​​​​​​print "oc scale --replicas=0  " $1}​​​​​​​​​​​' list.txt > run.txt

  # Build the Database image
  buildDatabase:
    name: Build Database Image
    runs-on: ubuntu-16.04
    if: ${{ github.event.pull_request.merged == false && github.event.pull_request.draft == false }}
    env:
      BUILD_ID: ${{ github.event.number }}
    needs:
      - scaleDownPods
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 10.16

      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Build the database image
      - name: Build Database Image
        working-directory: './database/.pipeline/'
        run: |
          npm install
          # npm ci
          DEBUG=* npm run db:build -- --pr=$BUILD_ID

  # Build the Database Setup image
  buildDatabaseSetup:
    name: Build Database Setup Image
    runs-on: ubuntu-16.04
    if: ${{ github.event.pull_request.merged == false && github.event.pull_request.draft == false }}
    env:
      BUILD_ID: ${{ github.event.number }}
    needs:
      - scaleDownPods
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 10.16

      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Build the database image
      - name: Build Database Setup Image
        working-directory: './database/.pipeline/'
        run: |
          npm install
          # npm ci
          DEBUG=* npm run db-setup:build -- --pr=$BUILD_ID

  # Build the API image
  buildAPI:
    name: Build API Image
    runs-on: ubuntu-16.04
    if: ${{ github.event.pull_request.merged == false && github.event.pull_request.draft == false }}
    env:
      BUILD_ID: ${{ github.event.number }}
    needs:
      - scaleDownPods
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 10.16

      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Build the api image
      - name: Build API Image
        working-directory: './api/.pipeline/'
        run: |
          npm install
          # npm ci
          DEBUG=* npm run build -- --pr=$BUILD_ID

  # Build the web frontend app image
  buildAPP:
    name: Build App Image
    runs-on: ubuntu-16.04
    if: ${{ github.event.pull_request.merged == false && github.event.pull_request.draft == false }}
    env:
      BUILD_ID: ${{ github.event.number }}
    needs:
      - scaleDownPods
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 10.16

      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Build the app image
      - name: Build APP Image
        working-directory: './app/.pipeline/'
        run: |
          npm install
          # npm ci
          DEBUG=* npm run build -- --pr=$BUILD_ID

  # Deploy Database image
  deployDatabase:
    name: Deploy Database Image
    runs-on: ubuntu-16.04
    if: ${{ github.event.pull_request.merged == false && github.event.pull_request.draft == false }}
    env:
      BUILD_ID: ${{ github.event.number }}
      BRANCH: ${{ github.base_ref }}
    needs:
      - buildDatabase
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 10.16

      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Deploy the database image
      - name: Deploy Database Image
        working-directory: './database/.pipeline/'
        run: |
          npm install
          DEBUG=* npm run db:deploy -- --pr=$BUILD_ID --env=dev

  # Deploy Database image
  deployDatabaseSetup:
    name: Deploy Database Setup Image
    runs-on: ubuntu-16.04
    if: ${{ github.event.pull_request.merged == false && github.event.pull_request.draft == false }}
    env:
      BUILD_ID: ${{ github.event.number }}
      BRANCH: ${{ github.base_ref }}
    needs:
      - buildDatabaseSetup
      - deployDatabase
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 10.16

      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Deploy the database setup image
      - name: Deploy Database Setup Image
        working-directory: './database/.pipeline/'
        run: |
          npm install
          # npm ci
          DEBUG=* npm run db-setup:deploy -- --pr=$BUILD_ID --env=dev

  # Deploy API image
  deployAPI:
    name: Deploy API Image
    runs-on: ubuntu-16.04
    if: ${{ github.event.pull_request.merged == false && github.event.pull_request.draft == false }}
    env:
      BUILD_ID: ${{ github.event.number }}
      BRANCH: ${{ github.base_ref }}
    needs:
      - buildAPI
      - deployDatabase
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 10.16

      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Deploy the api image
      - name: Deploy API Image
        working-directory: './api/.pipeline/'
        run: |
          npm install
          # npm ci
          DEBUG=* npm run deploy -- --pr=$BUILD_ID --env=dev

  # Deploy App image
  deployAPP:
    name: Deploy App Image
    runs-on: ubuntu-16.04
    if: ${{ github.event.pull_request.merged == false && github.event.pull_request.draft == false }}
    env:
      BUILD_ID: ${{ github.event.number }}
      BRANCH: ${{ github.base_ref }}
    needs:
      - buildAPP
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 10.16

      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Deploy the app image
      - name: Deploy App Image
        working-directory: './app/.pipeline'
        run: |
          npm install
          # npm ci
          DEBUG=* npm run deploy -- --pr=$BUILD_ID --env=dev

  # # Clean build/deployment artifacts
  # clean:
  #   name: Clean Build/Deployment Artifacts
  #   runs-on: ubuntu-16.04
  #   if: ${{ github.event.pull_request.merged == true && github.base_ref != 'dev' && github.base_ref != 'test' && github.base_ref != 'prod' && github.event.pull_request.draft == false }}
  #   needs:
  #     - deployDatabase
  #     - deployAPI
  #     - deployAPP
  #   env:
  #     BUILD_ID: ${{ github.event.number }}
  #     BRANCH: ${{ github.base_ref }}
  #   steps:
  #     # Checkout the PR branch
  #     - name: Checkout Target Branch
  #       uses: actions/checkout@v2

  #     # Install Node - for `node` and `npm` commands
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 10.16

  #     # Cache Node modules
  #     - name: Cache node modules
  #       uses: actions/cache@v2
  #       env:
  #         cache-name: cache-node-modules
  #       with:
  #         # npm cache files are stored in `~/.npm` on Linux/macOS
  #         path: ~/.npm
  #         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.cache-name }}-
  #           ${{ runner.os }}-build-
  #           ${{ runner.os }}-

  #     # Log in to OpenShift.
  #     # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
  #     # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
  #     - name: Log in to OpenShift
  #       run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

  #     # Clean the database build/deployment artifacts
  #     - name: Clean Database Artifacts
  #       working-directory: './database/.pipeline/'
  #       run: |
  #         npm install
  #         # npm ci
  #         DEBUG=* npm run clean -- --pr=$BUILD_ID --env=build
  #         DEBUG=* npm run clean -- --pr=$BUILD_ID --env=dev

  #     # Clean the api build/deployment artifacts
  #     - name: Clean API Artifacts
  #       working-directory: './api/.pipeline/'
  #       run: |
  #         npm install
  #         # npm ci
  #         DEBUG=* npm run clean -- --pr=$BUILD_ID --env=build
  #         DEBUG=* npm run clean -- --pr=$BUILD_ID --env=dev

  #     # Clean the app build/deployment artifacts
  #     - name: Clean APP Artifacts
  #       working-directory: './app/.pipeline/'
  #       run: |
  #         npm install
  #         # npm ci
  #         DEBUG=* npm run clean -- --pr=$BUILD_ID --env=build
  #         DEBUG=* npm run clean -- --pr=$BUILD_ID --env=dev
