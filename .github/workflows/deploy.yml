# PR Based Deploy On OpenShift
# Builds and Deploys unmerged PR's to temporary pods/services/routes/etc in the OpenShift Dev environment.
name: PR-Based Deploy on OpenShift

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  # Print variables for logging and debugging purposes
  checkEnv:
    name: Print Env variables
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ github.event.pull_request.merged == false }}
    steps:
      - name: Print Env Vars
        run: |
          echo OC CLI Version: $(oc version)
          echo Git Base Ref: ${{ github.base_ref }}
          echo Git Change ID: ${{ github.event.number }}
          echo Git Pull Request Ref: ${{ github.event.pull_request.head.sha }}
          echo Git Event Name: ${{ github.event_name }}
          echo Git Event Action: ${{ github.event.action }}
          echo Git Branch Ref: ${{ github.head_ref || github.ref_name }}
          echo Git Labels: "$LABELS"
          echo PR in Draft: ${{ github.event.pull_request.draft }}

  # Scans the commit against past commits, and determines if any jobs are skippable (due to no changes in target files).
  # Note: this does not take into account the current branch and will check past workflows from any branch, so an
  # additional check against the current branch is added to the `if` in the build jobs below.
  skipDuplicateActions:
    name: Check for duplicate actions
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs:
      - checkEnv
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
      paths_result: ${{ steps.skip_check.outputs.paths_result }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          paths_filter: |
            app:
              paths:
                - 'app/src/**'
                - 'app/package*.json'
                - 'app/.pipeline/**'
                - 'app/Dockerfile'
                - 'app/server/**'
                - 'app/public/**'
              paths_ignore:
                - 'app/src/**/*.test.ts'
                - 'app/**.md'
            api:
              paths:
                - 'api/src/**'
                - 'api/package*.json'
                - 'api/.pipeline/**'
                - 'api/Dockerfile'
              paths_ignore:
                - 'api/src/**/*.test.ts'
                - 'api/**.md'
            database:
              paths:
                - 'database/src/**' 
                - 'database/package*.json'
                - 'database/.pipeline/**'
                - 'database/.docker/Dockerfile.setup'
                - 'database/.docker/Dockerfile.migrate'
              paths_ignore:
                - 'database/src/**/*.test.ts'
                - 'database/**.md'

  # Checkout the repo once and cache it for use in subsequent jobs
  checkoutRepo:
    name: Checkout and cache target branch
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: ${{ github.event.pull_request.merged == false }}
    env:
      PR_NUMBER: ${{ github.event.number }}
    needs:
      - skipDuplicateActions
    steps:
      # Install Node - for `node` and `npm` commands
      # Note: This already uses actions/cache internally, so repeat calls in subsequent jobs are not a performance hit
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Checkout Target Branch
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      # Cache the repo
      - name: Cache repo
        uses: actions/cache@v3
        id: cache-repo
        env:
          cache-name: cache-repo
        with:
          # Cache repo based on the commit sha that triggered the workflow
          path: ${{ github.workspace }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}

  # Build the web frontend app image
  buildAPP:
    name: Build APP Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: |
      github.event.pull_request.merged == false && 
      github.event.pull_request.draft == false && 
      !(fromJSON(needs.skipDuplicateActions.outputs.paths_result).app.should_skip && fromJSON(needs.skipDuplicateActions.outputs.paths_result).app.skipped_by.branch == '$BRANCH_REF')
    env:
      PR_NUMBER: ${{ github.event.number }}
      APP_NAME: "biohubbc-app"
      BRANCH_REF: ${{ github.head_ref || github.ref_name }}
    needs:
      - checkoutRepo
      - skipDuplicateActions
    steps:
      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      # Load repo from cache
      - name: Cache repo
        uses: actions/cache@v3
        id: cache-repo
        env:
          cache-name: cache-repo
        with:
          path: ${{ github.workspace }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}

      # Checkout the branch if not restored via cache
      - name: Checkout Target Branch
        if: steps.cache-repo.outputs.cache-hit != 'true'
        uses: actions/checkout@v3

      # Cache Node modules
      # - name: Cache app pipeline node modules
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-app-pipeline-node-modules
      #   with:
      #     # npm cache files are stored in `~/.npm` on Linux/macOS
      #     path: ~/.npm
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('app/.pipeline/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Scale down any existing OpenShift pods for this PR deployment
      # Why? The new pods will be deployed before the existing pods are terminated, and twice the resources will be needed
      # in that moment. If not enough resources are available to spin up the new pods, then they may fail to deploy.
      - name: Scale down app pods
        run: |
          oc project af2668-dev
          oc get deploymentconfig --selector env-id=$PR_NUMBER,app-name=$APP_NAME -o name | awk '{print "oc scale --replicas=0  " $1}' | bash

      # Install app pipeline node modules
      - name: Install app pipeline node modules
        uses: bahmutov/npm-install@v1
        with:
          working-directory: "app/.pipeline/"

      # Build the app image
      - name: Build APP Image
        working-directory: "app/.pipeline/"
        run: |
          DEBUG=* npm run build -- --pr=$PR_NUMBER

  # Build the Database image
  buildDatabase:
    name: Build Database Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: |
      github.event.pull_request.merged == false && 
      github.event.pull_request.draft == false && 
      !(fromJSON(needs.skipDuplicateActions.outputs.paths_result).database.should_skip && fromJSON(needs.skipDuplicateActions.outputs.paths_result).database.skipped_by.branch == '$BRANCH_REF')
    env:
      PR_NUMBER: ${{ github.event.number }}
      APP_NAME: "biohubbc-db"
      BRANCH_REF: ${{ github.head_ref || github.ref_name }}
    needs:
      - checkoutRepo
      - skipDuplicateActions
    steps:
      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      # Load repo from cache
      - name: Cache repo
        uses: actions/cache@v3
        id: cache-repo
        env:
          cache-name: cache-repo
        with:
          path: ${{ github.workspace }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}

      # Checkout the branch if not restored via cache
      - name: Checkout Target Branch
        if: steps.cache-repo.outputs.cache-hit != 'true'
        uses: actions/checkout@v3

      # Cache Node modules
      # - name: Cache database pipeline node modules
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-database-pipeline-node-modules
      #   with:
      #     # npm cache files are stored in `~/.npm` on Linux/macOS
      #     path: ~/.npm
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('database/.pipeline/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Scale down any existing OpenShift pods for this PR deployment
      # Why? The new pods will be deployed before the existing pods are terminated, and twice the resources will be needed
      # in that moment. If not enough resources are available to spin up the new pods, then they may fail to deploy.
      - name: Scale down database pods
        run: |
          oc project af2668-dev
          oc get deploymentconfig --selector env-id=$PR_NUMBER,app-name=$APP_NAME -o name | awk '{print "oc scale --replicas=0  " $1}' | bash

      # Install database pipeline node modules
      - name: Install database pipeline node modules
        uses: bahmutov/npm-install@v1
        with:
          working-directory: "database/.pipeline/"

      # Build the database image
      - name: Build Database Image
        working-directory: "database/.pipeline/"
        run: |
          DEBUG=* npm run db:build -- --pr=$PR_NUMBER

  # Build the Database Setup image
  buildDatabaseSetup:
    name: Build Database Setup Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: |
      github.event.pull_request.merged == false && 
      github.event.pull_request.draft == false && 
      !(fromJSON(needs.skipDuplicateActions.outputs.paths_result).database.should_skip && fromJSON(needs.skipDuplicateActions.outputs.paths_result).database.skipped_by.branch == '$BRANCH_REF')
    env:
      PR_NUMBER: ${{ github.event.number }}
      BRANCH_REF: ${{ github.head_ref || github.ref_name }}
    needs:
      - checkoutRepo
      - skipDuplicateActions
    steps:
      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      # Load repo from cache
      - name: Cache repo
        uses: actions/cache@v3
        id: cache-repo
        env:
          cache-name: cache-repo
        with:
          path: ${{ github.workspace }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}

      # Checkout the branch if not restored via cache
      - name: Checkout Target Branch
        if: steps.cache-repo.outputs.cache-hit != 'true'
        uses: actions/checkout@v3

      # Cache Node modules
      # - name: Cache database pipeline node modules
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-database-pipeline-node-modules
      #   with:
      #     # npm cache files are stored in `~/.npm` on Linux/macOS
      #     path: ~/.npm
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('database/.pipeline/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Install database pipeline node modules
      - name: Install database pipeline node modules
        uses: bahmutov/npm-install@v1
        with:
          working-directory: "database/.pipeline/"

      # Build the database image
      - name: Build Database Setup Image
        working-directory: "database/.pipeline/"
        run: |
          DEBUG=* npm run db-setup:build -- --pr=$PR_NUMBER

  # Build the API image
  buildAPI:
    name: Build API Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: |
      github.event.pull_request.merged == false && 
      github.event.pull_request.draft == false && 
      !(fromJSON(needs.skipDuplicateActions.outputs.paths_result).api.should_skip && fromJSON(needs.skipDuplicateActions.outputs.paths_result).api.skipped_by.branch == '$BRANCH_REF')
    env:
      PR_NUMBER: ${{ github.event.number }}
      APP_NAME: "biohubbc-api"
      BRANCH_REF: ${{ github.head_ref || github.ref_name }}
    needs:
      - checkoutRepo
      - skipDuplicateActions
    steps:
      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      # Load repo from cache
      - name: Cache repo
        uses: actions/cache@v3
        id: cache-repo
        env:
          cache-name: cache-repo
        with:
          path: ${{ github.workspace }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}

      # Checkout the branch if not restored via cache
      - name: Checkout Target Branch
        if: steps.cache-repo.outputs.cache-hit != 'true'
        uses: actions/checkout@v3

      # Cache Node modules
      # - name: Cache api pipeline node modules
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-api-pipeline-node-modules
      #   with:
      #     # npm cache files are stored in `~/.npm` on Linux/macOS
      #     path: ~/.npm
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('api/.pipeline/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Scale down any existing OpenShift pods for this PR deployment
      # Why? The new pods will be deployed before the existing pods are terminated, and twice the resources will be needed
      # in that moment. If not enough resources are available to spin up the new pods, then they may fail to deploy.
      - name: Scale down api pods
        run: |
          oc project af2668-dev
          oc get deploymentconfig --selector env-id=$PR_NUMBER,app-name=$APP_NAME -o name | awk '{print "oc scale --replicas=0  " $1}' | bash

      # Install api pipeline node modules
      - name: Install api pipeline node modules
        uses: bahmutov/npm-install@v1
        with:
          working-directory: "api/.pipeline/"

      # Build the api image
      - name: Build API Image
        working-directory: "api/.pipeline/"
        run: |
          DEBUG=* npm run build -- --pr=$PR_NUMBER

  # Deploy APP image
  deployAPP:
    name: Deploy APP Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: |
      github.event.pull_request.merged == false && 
      github.event.pull_request.draft == false && 
      !(fromJSON(needs.skipDuplicateActions.outputs.paths_result).app.should_skip && fromJSON(needs.skipDuplicateActions.outputs.paths_result).app.skipped_by.branch == '$BRANCH_REF')
    env:
      PR_NUMBER: ${{ github.event.number }}
      BRANCH_REF: ${{ github.head_ref || github.ref_name }}
    needs:
      - buildAPP
    steps:
      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      # Load repo from cache
      - name: Cache repo
        uses: actions/cache@v3
        id: cache-repo
        env:
          cache-name: cache-repo
        with:
          path: ${{ github.workspace }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}

      # Checkout the branch if not restored via cache
      - name: Checkout Target Branch
        if: steps.cache-repo.outputs.cache-hit != 'true'
        uses: actions/checkout@v3

      # Cache Node modules
      # - name: Cache app pipeline node modules
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-app-pipeline-node-modules
      #   with:
      #     # npm cache files are stored in `~/.npm` on Linux/macOS
      #     path: ~/.npm
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('app/.pipeline/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Install app pipeline node modules
      - name: Install app pipeline node modules
        uses: bahmutov/npm-install@v1
        with:
          working-directory: "app/.pipeline"

      # Deploy the app image
      - name: Deploy APP Image
        working-directory: "app/.pipeline"
        run: |
          DEBUG=* npm run deploy -- --pr=$PR_NUMBER --env=dev

  # Deploy Database image
  deployDatabase:
    name: Deploy Database Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: |
      github.event.pull_request.merged == false && 
      github.event.pull_request.draft == false && 
      !(fromJSON(needs.skipDuplicateActions.outputs.paths_result).database.should_skip && fromJSON(needs.skipDuplicateActions.outputs.paths_result).database.skipped_by.branch == '$BRANCH_REF')
    env:
      PR_NUMBER: ${{ github.event.number }}
      BRANCH_REF: ${{ github.head_ref || github.ref_name }}
    needs:
      - buildDatabase
    steps:
      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      # Load repo from cache
      - name: Cache repo
        uses: actions/cache@v3
        id: cache-repo
        env:
          cache-name: cache-repo
        with:
          path: ${{ github.workspace }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}

      # Checkout the branch if not restored via cache
      - name: Checkout Target Branch
        if: steps.cache-repo.outputs.cache-hit != 'true'
        uses: actions/checkout@v3

      # Cache Node modules
      # - name: Cache database pipeline node modules
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-database-pipeline-node-modules
      #   with:
      #     # npm cache files are stored in `~/.npm` on Linux/macOS
      #     path: ~/.npm
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('database/.pipeline/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Install database pipeline node modules
      - name: Install database pipeline node modules
        uses: bahmutov/npm-install@v1
        with:
          working-directory: "database/.pipeline/"

      # Deploy the database image
      - name: Deploy Database Image
        working-directory: "database/.pipeline/"
        run: |
          DEBUG=* npm run db:deploy -- --pr=$PR_NUMBER --env=dev

  # Deploy Database image
  deployDatabaseSetup:
    name: Deploy Database Setup Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: |
      github.event.pull_request.merged == false && 
      github.event.pull_request.draft == false && 
      !(fromJSON(needs.skipDuplicateActions.outputs.paths_result).database.should_skip && fromJSON(needs.skipDuplicateActions.outputs.paths_result).database.skipped_by.branch == '$BRANCH_REF')
    env:
      PR_NUMBER: ${{ github.event.number }}
      BRANCH_REF: ${{ github.head_ref || github.ref_name }}
    needs:
      - buildDatabaseSetup
      - deployDatabase
    steps:
      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      # Load repo from cache
      - name: Cache repo
        uses: actions/cache@v3
        id: cache-repo
        env:
          cache-name: cache-repo
        with:
          path: ${{ github.workspace }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}

      # Checkout the branch if not restored via cache
      - name: Checkout Target Branch
        if: steps.cache-repo.outputs.cache-hit != 'true'
        uses: actions/checkout@v3

      # Cache Node modules
      # - name: Cache database pipeline node modules
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-database-pipeline-node-modules
      #   with:
      #     # npm cache files are stored in `~/.npm` on Linux/macOS
      #     path: ~/.npm
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('database/.pipeline/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Install database pipeline node modules
      - name: Install database pipeline node modules
        uses: bahmutov/npm-install@v1
        with:
          working-directory: "database/.pipeline/"

      # Deploy the database setup image
      - name: Deploy Database Setup Image
        working-directory: "database/.pipeline/"
        run: |
          DEBUG=* npm run db-setup:deploy -- --pr=$PR_NUMBER --env=dev

  # Deploy API image
  deployAPI:
    name: Deploy API Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: |
      github.event.pull_request.merged == false && 
      github.event.pull_request.draft == false && 
      !(fromJSON(needs.skipDuplicateActions.outputs.paths_result).api.should_skip && fromJSON(needs.skipDuplicateActions.outputs.paths_result).api.skipped_by.branch == '$BRANCH_REF')
    env:
      PR_NUMBER: ${{ github.event.number }}
      BRANCH_REF: ${{ github.head_ref || github.ref_name }}
    needs:
      - buildAPI
      - deployDatabase
    steps:
      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      # Load repo from cache
      - name: Cache repo
        uses: actions/cache@v3
        id: cache-repo
        env:
          cache-name: cache-repo
        with:
          path: ${{ github.workspace }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}

      # Checkout the branch if not restored via cache
      - name: Checkout Target Branch
        if: steps.cache-repo.outputs.cache-hit != 'true'
        uses: actions/checkout@v3

      # Cache Node modules
      # - name: Cache api pipeline node modules
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-api-pipeline-node-modules
      #   with:
      #     # npm cache files are stored in `~/.npm` on Linux/macOS
      #     path: ~/.npm
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('api/.pipeline/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Install api pipeline node modules
      - name: Install api pipeline node modules
        uses: bahmutov/npm-install@v1
        with:
          working-directory: "api/.pipeline/"

      # Deploy the api image
      - name: Deploy API Image
        working-directory: "api/.pipeline/"
        run: |
          DEBUG=* npm run deploy -- --pr=$PR_NUMBER --env=dev

  # Report the overall status of all deployments.
  # Note: skipped jobs are considered successes, cancelled jobs are considered failures.
  deploymentStatus:
    name: Deployment Status
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: |
      always() &&
      github.event.pull_request.merged == false && 
      github.event.pull_request.draft == false
    needs:
      - deployAPP
      - deployDatabase
      - deployDatabaseSetup
      - deployAPI
    steps:
      - name: Report success
        if: |
          (needs.deployAPP.result == 'success' || needs.deployAPP.result == 'skipped') &&
          (needs.deployDatabase.result == 'success' || needs.deployDatabase.result == 'skipped') &&
          (needs.deployDatabaseSetup.result == 'success' || needs.deployDatabaseSetup.result == 'skipped') &&
          (needs.deployAPI.result == 'success' || needs.deployAPI.result == 'skipped')
        run: |
          echo All deployments completed successfully or were skipped
          exit 0

      - name: Report failure
        if: |
          (needs.deployAPP.result == 'failure' || needs.deployAPP.result == 'cancelled') &&
          (needs.deployDatabase.result == 'failure' || needs.deployDatabase.result == 'cancelled') &&
          (needs.deployDatabaseSetup.result == 'failure' || needs.deployDatabaseSetup.result == 'cancelled') &&
          (needs.deployAPI.result == 'failure' || needs.deployAPI.result == 'cancelled')
        run: |
          echo One or more deployments failed or was cancelled
          exit 1
