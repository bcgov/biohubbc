# Clean out all deployment artifacts when a PR is closed, but not merged.
# Will attempt to remove all artifacts from any PR that was opened against any branch (and then closed), except for test and prod.
name: Clean Closed PR Artifacts

on:
  pull_request:
    branches:
      - '*'
      - '!test'
      - '!prod'
    types: [closed]

jobs:
  clean:
    name: Clean Deployment Artifacts for API and App in Dev and Tools environment
    runs-on: ubuntu-latest
    # Don't run if the PR was merged
    if: ${{ github.event.pull_request.merged != true }}
    env:
      PR_NUMBER: ${{ github.event.number }}
    steps:
      # Checkout the PR branch
      - name: Checkout Dev Branch - Contains the Pipeline Code
        uses: actions/checkout@v2
        with:
          ref: "dev"

      # Install Node - for `node` and `npm` commands
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/.pipeline/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Log in to OpenShift.
      - name: Log in to OpenShift
        run: oc login --token=${{ secrets.TOOLS_SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Clean the database build/deployment artifacts
      - name: Clean Database Artifacts
        working-directory: "./database/.pipeline/"
        run: |
          npm install --only=production
          DEBUG=* npm run clean -- --pr=$PR_NUMBER --env=build
          DEBUG=* npm run clean -- --pr=$PR_NUMBER --env=dev

      # Clean the api deployment artifacts
      - name: Clean API Deployment
        working-directory: "./api/.pipeline/"
        run: |
          npm install --only=production
          DEBUG=* npm run clean -- --pr=$PR_NUMBER --env=build
          DEBUG=* npm run clean -- --pr=$PR_NUMBER --env=dev

      # Clean the app deployment artifacts
      - name: Clean APP Deployment
        working-directory: "./app/.pipeline/"
        run: |
          npm install --only=production
          DEBUG=* npm run clean -- --pr=$PR_NUMBER --env=build
          DEBUG=* npm run clean -- --pr=$PR_NUMBER --env=dev

      # Clean the reamaining build/deployment artifacts
      - name: Clean remaining Artifacts
        run: |
          oc project af2668-dev
          oc get all,pvc,secret,pods,ReplicationController,DeploymentConfig,HorizontalPodAutoscaler,imagestreamtag -o name | grep biohubbc | grep $PR_NUMBER | awk '{print "oc delete " $1}' | bash
          oc project af2668-tools
          oc get all,pvc,secret,pods,ReplicationController,DeploymentConfig,HorizontalPodAutoscaler,imagestreamtag -o name | grep biohubbc | grep $PR_NUMBER | awk '{print "oc delete " $1}' | bash
